name: Banking Microservices CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  CUSTOMER_IMAGE_NAME: ${{ github.repository }}/customer-service
  PRODUCT_IMAGE_NAME: ${{ github.repository }}/product-service

jobs:
  build-customer-service:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build Customer Service
        working-directory: ./customer
        run: ./mvnw clean package -DskipTests

      - name: Run Customer Service Tests
        working-directory: ./customer
        run: ./mvnw test

      - name: Upload Customer Service Artifact
        uses: actions/upload-artifact@v3
        with:
          name: customer-service-jar
          path: customer/target/*.jar

  build-product-service:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build Product Service
        working-directory: ./product-pricing
        run: ./mvnw clean package -DskipTests

      - name: Run Product Service Tests
        working-directory: ./product-pricing
        run: ./mvnw test

      - name: Upload Product Service Artifact
        uses: actions/upload-artifact@v3
        with:
          name: product-service-jar
          path: product-pricing/target/*.jar

  docker-build-and-push:
    needs: [build-customer-service, build-product-service]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Customer Service Artifact
        uses: actions/download-artifact@v3
        with:
          name: customer-service-jar
          path: customer/target

      - name: Download Product Service Artifact
        uses: actions/download-artifact@v3
        with:
          name: product-service-jar
          path: product-pricing/target

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Customer Service
        id: meta-customer
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.CUSTOMER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Customer Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./customer
          push: true
          tags: ${{ steps.meta-customer.outputs.tags }}
          labels: ${{ steps.meta-customer.outputs.labels }}

      - name: Extract metadata for Product Service
        id: meta-product
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.PRODUCT_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Product Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./product-pricing
          push: true
          tags: ${{ steps.meta-product.outputs.tags }}
          labels: ${{ steps.meta-product.outputs.labels }}

  deploy-to-staging:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to Staging
        run: |
          kubectl apply -f k8s/staging/ --namespace=staging
          kubectl rollout status deployment/customer-service --namespace=staging
          kubectl rollout status deployment/product-service --namespace=staging

  deploy-to-production:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://banking.yourdomain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Deploy to Production
        run: |
          kubectl apply -f k8s/production/ --namespace=production
          kubectl rollout status deployment/customer-service --namespace=production
          kubectl rollout status deployment/product-service --namespace=production
